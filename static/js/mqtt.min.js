// MQTT.js 简化版本（用于演示）
// 实际项目中请使用完整的MQTT.js库

window.mqtt = {
    connect: function(url, options) {
        console.log('MQTT连接配置:', { url, options });
        return new MQTTClientStub(url, options);
    }
};

class MQTTClientStub {
    constructor(url, options) {
        this.url = url;
        this.options = options;
        this.isConnected = false;
        this.subscriptions = new Map();
        this.eventListeners = new Map();
        
        // 模拟连接过程
        setTimeout(() => {
            // 检查连接是否应该成功（基于配置）
            const shouldConnect = !url.includes('invalid') && options.host !== 'invalid';
            
            if (shouldConnect) {
                this.isConnected = true;
                this.triggerEvent('connect');
                console.log('MQTT连接成功:', { url, clientId: options.clientId });
            } else {
                this.triggerEvent('error', new Error('连接失败'));
            }
        }, 1000);
    }
    
    on(event, callback) {
        if (!this.eventListeners.has(event)) {
            this.eventListeners.set(event, []);
        }
        this.eventListeners.get(event).push(callback);
        return this;
    }
    
    subscribe(topic, options, callback) {
        console.log('订阅主题:', topic, options);
        this.subscriptions.set(topic, options);
        
        if (callback) {
            setTimeout(() => callback(null), 100);
        }
        return this;
    }
    
    publish(topic, message, options, callback) {
        console.log('发布消息:', topic, message, options);
        
        if (callback) {
            setTimeout(() => callback(null), 50);
        }
        return this;
    }
    
    end(force, callback) {
        console.log('断开连接');
        this.isConnected = false;
        this.triggerEvent('close');
        
        if (callback) {
            setTimeout(callback, 100);
        }
    }
    
    triggerEvent(event, ...args) {
        const listeners = this.eventListeners.get(event) || [];
        listeners.forEach(callback => {
            try {
                callback(...args);
            } catch (error) {
                console.error('事件处理错误:', error);
            }
        });
    }
}